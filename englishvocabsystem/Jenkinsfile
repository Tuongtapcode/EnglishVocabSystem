pipeline {
    agent any

    environment {
        IMAGE_NAME = 'nguyentuong/englishvocabsystem'
        IMAGE_TAG = "${BUILD_NUMBER}"
        // RENDER_DEPLOY_HOOK có thể chưa khai báo lần đầu
        // RENDER_DEPLOY_HOOK = 'https://api.render.com/deploy/srv-xxxx?key=YOUR_KEY'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'feature/cicd']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Tuongtapcode/EnglishVocabSystem.git'
                    ]]
                ])
            }
        }

        stage('Prepare Maven Wrapper') {
            steps {
                // Cấp quyền thực thi cho mvnw trên Linux agent
                sh 'chmod +x mvnw'
            }
        }

        stage('Maven Test') {
            steps {
                sh './mvnw clean test'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                sh "docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest"
            }
        }

        stage('Docker Login & Push') {
            when {
                expression {
                    return env.BRANCH_NAME == 'main' || env.GIT_BRANCH == 'origin/main'
                }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                }
                sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
                sh "docker push ${IMAGE_NAME}:latest"
            }
        }

        stage('Trigger Render Deploy') {
            when {
                expression {
                    // Chỉ chạy nếu biến RENDER_DEPLOY_HOOK đã khai báo
                    return env.RENDER_DEPLOY_HOOK?.trim()
                }
            }
            steps {
                echo "Triggering Render deploy via Deploy Hook..."
                sh "curl -X POST ${RENDER_DEPLOY_HOOK}"
            }
        }
    }

    post {
        always {
            sh 'docker system prune -f || true'
            sh 'docker container prune -f || true'
        }
        success {
            echo '✅ Pipeline completed successfully!'
        }
        failure {
            echo '❌ Pipeline failed!'
        }
    }
}
